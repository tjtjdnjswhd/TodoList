@page "/signup/{returnurl?}"

@inject NavigationManager navigation
@inject IJSRuntime jsRuntime
@inject IAuthenticationService authenticationService

<EditForm Model="signupInfo" OnValidSubmit="SignupCallback">
    <DataAnnotationsValidator />

    <p>
        <label for="email">Email </label>
        <InputText id="email" @bind-Value="signupInfo.Email" @oninput="() => isEmailChecked = false" autocomplete="0" />
        <button type="button" disabled="@(isEmailChecking || isEmailChecked)" @onclick="CheckEmail">
            @if (isEmailChecking)
            {
                <span class="spinner-border spinner-border-sm"></span>
            }
            중복 확인
        </button>
        <ValidationMessage For="() => signupInfo.Email" />
        @if (!isEmailChecked && displayCheckMessage)
        {
        <p class="validation-message">이메일 중복확인 후 사용 가능합니다</p>
        }
    </p>

    <p>
        <label for="name">Name </label>
        <InputText id="name" @bind-Value="signupInfo.Name" @oninput="() => isNameChecked = false" autocomplete="0" />
        <button type="button" disabled="@(isNameChecking || isNameChecked)" @onclick="CheckName">
            @if (isNameChecking)
            {
                <span class="spinner-border spinner-border-sm"></span>
            }
            중복 확인
        </button>
        <ValidationMessage For="() => signupInfo.Name" />
        @if (!isNameChecked && displayCheckMessage)
        {
        <p class="validation-message">이름 중복확인 후 사용 가능합니다</p>
        }
    </p>

    <p>
        <label for="password">Password </label>
        <InputText id="password" type="password" @bind-Value="signupInfo.Password" />
        <ValidationMessage For="() => signupInfo.Password" />
    </p>

    <p>
        <label for="passwordCheck">Password check </label>
        <InputText id="passwordCheck" type="password" @bind-Value="signupInfo.PasswordCheck" />
        <ValidationMessage For="() => signupInfo.PasswordCheck" />
    </p>

    <button type="submit" disabled="@loading">
        @if (loading)
        {
            <span class="spinner-border spinner-border-sm"></span>
        }
        회원가입
    </button>
</EditForm>

@code {
    [Parameter]
    public string? ReturnUrl { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private SignupInfo signupInfo = new();

    private bool displayCheckMessage = false;
    private bool loading = false;

    private bool isEmailChecking = false;
    private bool isNameChecking = false;

    private bool isEmailChecked = false;
    private bool isNameChecked = false;

    private async void CheckEmail()
    {
        if (string.IsNullOrEmpty(signupInfo.Email))
        {
            return;
        }

        isEmailChecking = true;
        bool isEmailExist = await authenticationService.IsEmailExistAsync(signupInfo.Email);
        if (isEmailExist)
        {
            await jsRuntime.InvokeVoidAsync("Alert", "중복되는 이메일이 있습니다");
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("Alert", "사용 가능한 이메일입니다");
            isEmailChecked = true;
        }
        isEmailChecking = false;
        StateHasChanged();
    }

    private async void CheckName()
    {
        if (string.IsNullOrEmpty(signupInfo.Name))
        {
            return;
        }

        isNameChecking = true;
        bool isNameExist = await authenticationService.IsNameExistAsync(signupInfo.Name);
        if (isNameExist)
        {
            await jsRuntime.InvokeVoidAsync("Alert", "중복되는 이름이 있습니다");
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("Alert", "사용 가능한 이름입니다");
            isNameChecked = true;
        }
        isNameChecking = false;
        StateHasChanged();
    }

    private async void SignupCallback()
    {
        if (!isEmailChecked || !isNameChecked)
        {
            displayCheckMessage = true;
            StateHasChanged();
            return;
        }

        loading = true;
        EErrorCode errorCode = await authenticationService.SignupAsync(signupInfo);
        switch (errorCode)
        {
            case EErrorCode.NoError:
                {
                    await jsRuntime.InvokeVoidAsync("Alert", "가입 완료됬습니다");
                    navigation.NavigateTo(ReturnUrl ?? "/");
                    return;
                }
            case EErrorCode.EmailDuplicate:
                {
                    await jsRuntime.InvokeVoidAsync("Alert", "중복되는 이메일이 있습니다");
                    isEmailChecked = false;
                    break;
                }
            case EErrorCode.NameDuplicate:
                {
                    await jsRuntime.InvokeVoidAsync("Alert", "중복되는 이름이 있습니다");
                    isNameChecked = false;
                    break;
                }
            default:
                {
                    Debug.Assert(false);
                    break;
                }
        }
        loading = false;
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {
        AuthenticationState state = await AuthState;
        if (state.User.Identity?.IsAuthenticated ?? false)
        {
            navigation.NavigateTo(ReturnUrl ?? "/");
        }
    }
}
