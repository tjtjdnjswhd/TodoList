@page "/login/{returnurl?}"

@inject IJSRuntime jsRuntime
@inject NavigationManager navigation
@inject IAuthenticationService authenticationService

<PageTitle>Login</PageTitle>

<EditForm Model="loginInfo" OnValidSubmit="LoginCallback">
    <DataAnnotationsValidator />

    <p>
        <label for="email">Email </label>
        <InputText id="email" @bind-Value="loginInfo.Email" />
        <ValidationMessage For="() => loginInfo.Email" />
    </p>

    <p>
        <label for="password">Password </label>
        <InputText id="password" @bind-Value="loginInfo.Password" />
        <ValidationMessage For="() => loginInfo.Password" />
    </p>

    <button type="submit" disabled="@loading">
        @if (loading)
        {
            <span class="spinner-border spinner-border-sm"></span>
        }
        로그인
    </button>
</EditForm>

@code {
    [Parameter]
    public string? ReturnUrl { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    private LoginInfo loginInfo = new();
    private bool loading = false;

    private async void LoginCallback()
    {
        loading = true;
        if (!await authenticationService.LoginAsync(loginInfo))
        {
            await jsRuntime.InvokeVoidAsync("Alert", "이메일 혹은 비밀번호가 일치하지 않습니다");
            loginInfo.Password = "";
            loading = false;
            StateHasChanged();
            return;
        }

        navigation.NavigateTo(ReturnUrl ?? "/", true);
    }

    protected override async void OnInitialized()
    {
        AuthenticationState state = await AuthState;
        if (state.User.Identity?.IsAuthenticated ?? false)
        {
            navigation.NavigateTo(ReturnUrl ?? "/");
        }
    }
}
