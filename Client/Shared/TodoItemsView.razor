@implements IDisposable
@inject ITodoItemService todoItemService

<CascadingValue Value="todoItemService" IsFixed="true">
    @if (isLoading)
    {
        <div>
            loading...
        </div>
    }
    else
    {
        <div class="todoitem-wrapper" style="max-height: calc(85vh - 60px); overflow: auto;">
            <div class="accordion" style="overflow: auto;">
                @foreach (var itemGroup in itemsDict.OrderBy(t => t.Key))
                {
                    <TodoItemGroup @key="itemGroup.Key" Date="itemGroup.Key" Items="itemGroup.Value" />
                }
            </div>
        </div>
        <TodoItemWrite class="input-group my-3" />
        @*<div class="position-fixed w-100 px-4 pb-3 bottom-0 start-0"></div>*@
    }
</CascadingValue>

@code {
    private bool isLoading = true;
    private Dictionary<DateTime, List<TodoItemDto>> itemsDict;

    public void Dispose()
    {
        todoItemService.ItemInitedEvent -= OnItemInited;
    }

    protected override async void OnInitialized()
    {
        todoItemService.ItemInitedEvent += OnItemInited;
        itemsDict = (await todoItemService.InitItemsAsync()) ?? throw new ArgumentNullException(nameof(itemsDict));
        isLoading = false;
        StateHasChanged();
    }

    private void OnItemInited(object? sender, EventArgs e)
    {
        StateHasChanged();
    }
}
