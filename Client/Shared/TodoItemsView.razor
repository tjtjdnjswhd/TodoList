@implements IDisposable
@inject ITodoItemService todoItemService

<CascadingValue Value="todoItemService" IsFixed="true">
    <div class="accordion">
        @foreach (var itemGroup in todoItemService.ItemsDict.OrderBy(t => t.Key))
        {
            <div class="accordion-item" @key="itemGroup.Key">
                <TodoItemGroup Items="itemGroup.Value" Date="itemGroup.Key"/>
            </div>
        }
    </div>

    <TodoItemWrite />
</CascadingValue>

@code {
    protected override async void OnInitialized()
    {
        todoItemService.ItemChangedEvent += OnItemChange;
        await todoItemService.InitItems();
    }

    private void OnItemChange(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        todoItemService.ItemChangedEvent -= OnItemChange;
    }
}
