@implements IDisposable

<div class="accordion-item">
    <div class="accordion-header">
        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#accordion-panel-@Date.ToString("yyMMdd")">
            @Date.ToString("yy.MM.dd")
        </button>
    </div>

    <div id="accordion-panel-@Date.ToString("yyMMdd")" class="accordion-collapse collapse show">
        <div class="input-group mt-2 px-3">
            <input type="text" class="form-control border-dark" @oninput="Search" />
            <select @bind="filter" class="form-select filter border-1 border-dark " @oninput="FilterItem">
                <option value="@EFilter.All">전체</option>
                <option value="@EFilter.Complete">완료</option>
                <option value="@EFilter.NotComplete">미완료</option>
            </select>
        </div>

        <div class="accordion-body">
            @if (filteredItems.Count() == 0)
            {
                <h3>일치하는 항목이 없습니다</h3>
            }
            else
            {
                <CascadingValue Value="this" IsFixed="true">
                    @foreach (var item in filteredItems)
                    {
                        <TodoItemView @key="item.Id" Item="item" />
                    }
                </CascadingValue>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public DateTime Date { get; set; }
    [Parameter]
    public List<TodoItemDto> Items { get; set; }
    [CascadingParameter]
    public ITodoItemService TodoItemService { get; set; }

    private string searchingText = string.Empty;
    private EFilter filter = EFilter.All;
    private IEnumerable<TodoItemDto> filteredItems;

    public void Dispose()
    {
        TodoItemService.ItemDeletedEvent -= StateChange;
        TodoItemService.ItemUpdatedEvent -= StateChange;
        TodoItemService.ItemAddedEvent -= StateChange;
    }

    public void FilterItem()
    {
        Debug.Assert(Enum.IsDefined(filter));
        Func<TodoItemDto, bool> predicate = t => filter switch
        {
            EFilter.All => true,
            EFilter.Complete => t.IsComplete,
            EFilter.NotComplete => !t.IsComplete,
            _ => false
        };

        if (string.IsNullOrEmpty(searchingText))
        {
            filteredItems = Items.Where(predicate);
        }
        else
        {
            filteredItems = Items.Where(t => predicate(t) & t.Name.Contains(searchingText, StringComparison.OrdinalIgnoreCase));
        }
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        TodoItemService.ItemDeletedEvent += StateChange;
        TodoItemService.ItemUpdatedEvent += StateChange;
        TodoItemService.ItemAddedEvent += StateChange;
        filteredItems = Items;
    }

    private void StateChange(object? sender, EventArgs e)
    {
        StateHasChanged();
    }


    private void Search(ChangeEventArgs e)
    {
        searchingText = e.Value as string ?? string.Empty;
        FilterItem();
    }

    public enum EFilter
    {
        All,
        Complete,
        NotComplete
    }
}
