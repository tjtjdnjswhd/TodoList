@inject IJSRuntime jsRuntime

<div>
    <input class="fs-5 form-text" @ref="name" @bind-value="newName" @oninput="() => nameChanged = true" @onkeydown="NameKeydown" @onblur="ChangeName" />
    <span class="fs-5">@Item.CreatedAt.ToString("HH:mm")</span>
    <input type="checkbox" @bind="Item.IsComplete" @oninput="async () => { await TodoItemService.ToggleIsCompleteAsync(Item); Item.IsComplete ^= true; }" />
    <button type="button" @onclick="Delete">
        <span class="oi oi-trash"></span>
    </button>
</div>

@code {
    [Parameter]
    public TodoItemDto Item { get; set; }

    [CascadingParameter]
    public ITodoItemService TodoItemService { get; set; }

    private ElementReference name;

    private string newName = string.Empty;
    private bool nameChanged = false;

    private async void NameKeydown(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key.Equals("Enter", StringComparison.OrdinalIgnoreCase))
        {
            await jsRuntime.InvokeVoidAsync("Blur", name);
        }
    }

    private async void ChangeName()
    {
        if (nameChanged)
        {
            await TodoItemService.EditItemNameAsync(Item, newName);
            nameChanged = false;
        }
    }

    private async void Delete()
    {
        if (await jsRuntime.InvokeAsync<bool>("Confirm", "삭제 하시겠습니까?"))
        {
            await TodoItemService.DeleteItemAsync(Item);
        }
    }

    protected override void OnParametersSet()
    {
        newName = Item.Name;
    }
}
