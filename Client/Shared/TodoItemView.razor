@inject IJSRuntime jsRuntime

<div class="d-flex align-items-center fs-5">
    <input type="checkbox" class="form-check" @bind="Item.IsComplete" @oninput="async () => { await TodoItemService.ToggleIsCompleteAsync(Item); Item.IsComplete ^= true; Group.FilterItem(); }" />
    <input class="w-100 mx-3 py-0" type="text" @ref="nameInput" @bind-value="newName" @oninput="() => nameChanged = true" @onkeydown="NameKeydown" @onblur="ChangeName" />
    <span>@Item.CreatedAt.ToString("HH:mm")</span>
    <button type="button" class="btn" @onclick="Delete">
        <span class="oi oi-x"></span>
    </button>
</div>

@code {
    [Parameter]
    public TodoItemDto Item { get; set; }
    [CascadingParameter]
    public ITodoItemService TodoItemService { get; set; }
    [CascadingParameter]
    public TodoItemGroup Group { get; set; }

    private ElementReference nameInput;
    private string newName = string.Empty;
    private bool nameChanged = false;

    protected override void OnParametersSet()
    {
        newName = Item.Name;
    }

    private async void NameKeydown(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key.Equals("Enter", StringComparison.OrdinalIgnoreCase))
        {
            await jsRuntime.InvokeVoidAsync("Blur", nameInput);
        }
    }

    private async void ChangeName()
    {
        if (nameChanged)
        {
            if (string.IsNullOrEmpty(newName))
            {
                await jsRuntime.InvokeVoidAsync("Alert", "내용을 작성해 주세요");
                newName = Item.Name;
                StateHasChanged();
            }
            else
            {
                await TodoItemService.EditItemNameAsync(Item, newName);
                nameChanged ^= true;
            }
        }
    }

    private async void Delete()
    {
        if (await jsRuntime.InvokeAsync<bool>("Confirm", "삭제 하시겠습니까?"))
        {
            await TodoItemService.DeleteItemAsync(Item);
        }
    }
}
