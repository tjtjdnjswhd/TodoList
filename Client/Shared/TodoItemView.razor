@inject IJSRuntime jsRuntime

<div>
    <p>
        <input class="fs-3" @ref="name" @bind-value="newName" @oninput="() => nameChanged = true" @onfocusout="ChangeName" @onkeydown="NameKeydown" />
        <span class="fs-3">@Item.CreatedAt.ToShortTimeString()</span>
        <input type="checkbox" @bind="Item.IsComplete" @oninput="async () => { await TodoItemService.ToggleIsCompleteAsync(Item.Id); Item.IsComplete ^= true; }" />
        <button type="button" @onclick="async () => await TodoItemService.DeleteItemAsync(Item.Id)">delete</button>
    </p>
</div>

@code {
    [Parameter]
    public TodoItemDto Item { get; set; }

    [CascadingParameter]
    public ITodoItemService TodoItemService { get; set; }

    private ElementReference name;

    private string newName = string.Empty;
    private bool nameChanged = false;

    private async void NameKeydown(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Code.Equals("Enter", StringComparison.OrdinalIgnoreCase))
        {
            ChangeName();
            await jsRuntime.InvokeVoidAsync("Blur", name);
        }
    }

    private async void ChangeName()
    {
        if (nameChanged)
        {
            await TodoItemService.EditItemNameAsync(Item.Id, newName);
            nameChanged = false;
        }
    }

    protected override void OnInitialized()
    {
        if (TodoItemService == null || Item == null)
        {
        }
        newName = Item.Name;
    }
}
