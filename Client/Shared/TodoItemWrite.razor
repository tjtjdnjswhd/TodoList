@inject IJSRuntime jsRuntime

@if (creating)
{
    <div class="w-100 bg-success text-white">
        저장 중...
    </div>
}

<EditForm Model="Model" OnValidSubmit="AddItem" @attributes="FormAttribute">
    <InputText @bind-Value="Model.NewItemName" class="form-control" style="background-color: azure;" />
    <button type="submit" class="btn btn-outline-primary" disabled="@creating">추가</button>
</EditForm>

@code {
    [CascadingParameter]
    public ITodoItemService TodoItemService { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> FormAttribute { get; set; }

    private FormModel Model = new();
    private bool creating = false;

    public async void AddItem()
    {
        if (string.IsNullOrEmpty(Model.NewItemName))
        {
            await jsRuntime.InvokeVoidAsync("Alert", "내용을 작성해 주세요");
            return;
        }

        creating = true;
        await TodoItemService.AddItemAsync(Model.NewItemName);
        Model.NewItemName = "";
        creating = false;
        StateHasChanged();
    }

    public class FormModel
    {
        public string NewItemName { get; set; } = "";
    }
}
